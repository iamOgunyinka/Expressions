Algorithm for linearizing a Plus Node
=====================================

1) Starting from the root node, make it the current node.
2) Traverse the current node from left to right.
3) If the current node is a plus node( or the binary operator to linearize ), add it to the operator queue.
4) Otherwise if its children is a unary function, a variable or a constant, simply add this child to the child queue.
5) Repeat step 2 until the whole tree has benn traversed.

6) From the front of the operator queue, traverse the queue as follows:
    i)      If the tree to build is nothing( nullptr ), build the current operator symbol as the root of the tree to build.
    ii)     Take the next two children from the children queue. Make a pointer( say, NodeXPointer ) point to the rightmost child of this tree.
    iii)    Remove the operator and the two children just used.
    iv)     If the tree to build is not nothing( that is, it already has children ), build the tree for the next operator in the queue. Since, NodeXPointer points to the rightmost child of the tree to build, "steal" this child and replace the space with the tree just built.
    v)      Set the left child of this new tree as the "stolen" child. Set the next child from the queue as the right child of this tree.
    vi)     NodeXPointer now points to this rightmost child. Pop both the operator used and this left child.
    vii)    Repeat step 6(iv) until there are no elements left in the operator queue.

By the end of the procedure, we already have a linearized tree.
